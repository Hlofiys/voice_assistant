import { SecureStorageKeys } from "@/constants/SecureStorage";
import { useRefreshToken } from "@/hooks/api/auth/useRefreshToken";
import * as SecureStorage from "expo-secure-store";
import { AxiosError } from "axios";

export const useErrorHook = (refetchKey?: string[]) => {
  const { mutateAsync: refresh, isPending } = useRefreshToken(refetchKey);

  return {
    onError: async (
      error: AxiosError<any, any>,
      callback?: () => Promise<void>
    ) => {
      console.log(error?.response?.status);
      if (error?.response?.status === 401) {
        const refreshToken = await SecureStorage.getItemAsync(
          SecureStorageKeys.REFRESH_TOKEN
        );
        if (!!refreshToken) {
          try {
            await refresh({ refresh_token: refreshToken });
            console.log("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω");

            if (callback) {
              console.log("üîÅ –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞");
              await callback(); // –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
            } 
          } catch (e) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞", e);
          }
        }
      }
    },
    isPending,
  };
};
