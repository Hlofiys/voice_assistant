import React, { useState, useCallback, useEffect } from "react";
import { View, Text, Linking, StyleSheet } from "react-native";
import {
  RecordingPresets,
  useAudioPlayer,
  useAudioRecorder,
  requestRecordingPermissionsAsync,
  getRecordingPermissionsAsync,
} from "expo-audio";
import * as FileSystem from "expo-file-system";
import { useAlert } from "@/context/providers/portal.modal/AlertProvider";
import { useTimer } from "@/hooks/gen/timer/useTimer";
import Button from "../ui/buttons/Button";
import { useSendVoiceMessage } from "@/hooks/api/chat/useSendVoiceMessage";
import { useSelector } from "react-redux";
import { IInitialState } from "@/reduxToolkit/Interfaces";
import { IChatProps } from "@/services/chat/Chat.service";

export default function AudioRecorder() {
  const [isRecording, setIsRecording] = useState<boolean>(false);
  const [permissionStatus, setPermissionStatus] = useState<boolean>(false);
  const token = useSelector((state: IInitialState) => state.token);
  const [file, setFile] = useState<string>("");

  const { mutateAsync: send_message, isPending: isPendingSendMessage } =
    useSendVoiceMessage();

  const { showAlert } = useAlert();

  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);
  const player = useAudioPlayer(file || "");

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ useTimer
  const { time, startTimer, pauseTimer, resetTimer, totalMilliseconds } =
    useTimer();

  const requestMicrophonePermission = useCallback(async () => {
    const status = await getRecordingPermissionsAsync();
    setPermissionStatus(status.granted);
  }, []);

  useEffect(() => {
    requestMicrophonePermission();
  }, []);

  const formatCustomTime = (totalMilliseconds: number): string => {
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å time –∏–∑ —Ö—É–∫–∞, –Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –æ—Å—Ç–∞–≤—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ç.
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ useTimer, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å time.
    return time;
  };

  const onStartRecord = async () => {
    const { status, granted } = await requestRecordingPermissionsAsync();

    if (!granted) {
      if (status === "denied") {
        openSettings();
      } else {
        showAlert({
          title: "–û—à–∏–±–∫–∞",
          subtitle: "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É",
        });
      }
      return;
    }

    if (file) {
      try {
        await FileSystem.deleteAsync(file);
        setFile("");
        player?.release();
      } catch (e) {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª", e);
      }
    }

    try {
      await audioRecorder.prepareToRecordAsync();
      audioRecorder.record();
      setIsRecording(true);
      startTimer(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Ö—É–∫–∞
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏:", error);
    }
  };

  const onStopRecord = useCallback(async () => {
    await audioRecorder.stop();
    pauseTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä (—Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É) –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏, –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å resetTimer()

    await new Promise((r) => setTimeout(r, 500));
    const recordedUri = audioRecorder.uri;
    if (recordedUri) {
      const fileInfo = await FileSystem.getInfoAsync(recordedUri);
      if (fileInfo.exists) {
        await new Promise((r) => setTimeout(r, 200));
        setFile(fileInfo.uri);
      } else {
        console.warn("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", recordedUri);
      }
    }

    setIsRecording(false);
  }, [audioRecorder, pauseTimer]);

  const openSettings = () => {
    showAlert({
      title: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É",
      subtitle: "–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.",
      buttons: [
        { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
        { text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", onPress: () => Linking.openSettings() },
      ],
    });
  };

  const onDeleteFile = async () => {
    if (file) {
      try {
        player?.remove();
        await FileSystem.deleteAsync(file);
        await new Promise((r) => setTimeout(r, 500));
        setFile("");
        resetTimer(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
      } catch (e) {
        console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", e);
      }
    }
  };

  const handleSendMessage = useCallback(async () => {
    if (!file) {
      showAlert({
        title: "–û—à–∏–±–∫–∞",
        subtitle: "–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
      });
      return;
    }

    try {
      const fileInfo = await FileSystem.getInfoAsync(file);
      if (!fileInfo.exists) {
        showAlert({ title: "–û—à–∏–±–∫–∞", subtitle: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω." });
        return;
      }

      const props: IChatProps = {
        fileUri: fileInfo.uri,
        fileName: "recording.m4a",
        mimeType: "audio/mp4",
      };
      await send_message(props); // üëà —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ:", error);
      showAlert({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        subtitle: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª.",
      });
    }
  }, [file, send_message]);
  return (
    <View style={styles.container}>
      <Text style={styles.title}>–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å</Text>

      {file && player ? (
        <View style={styles.audioFileContainer}>
          <Text style={styles.fileName} numberOfLines={1}>
            {file.split("/").pop()}
          </Text>

          <Text style={styles.time}>
            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {formatCustomTime(totalMilliseconds)}
          </Text>

          <View style={styles.buttonsRow}>
            <Button
              title="‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"
              type="text"
              onPress={async () => {
                if (player) {
                  await player.seekTo(0); // –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å –Ω–∞ –Ω–∞—á–∞–ª–æ
                  player.play(); // –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                }
              }}
              textStyle={{ color: "#0a7ea4" }}
            />
            <Button
              type="text"
              textStyle={{ color: "#0a7ea4" }}
              title="‚è∏ –ü–∞—É–∑–∞"
              onPress={() => player?.pause()}
            />
            <Button
              title="–£–¥–∞–ª–∏—Ç—å"
              type="text"
              onPress={onDeleteFile}
              textStyle={{ color: "red" }}
            />
            <Button
              onPress={handleSendMessage}
              isLoading={isPendingSendMessage}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
          </View>
        </View>
      ) : (
        <Button
          title={isRecording ? "–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å..." : "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"}
          onPress={onStartRecord}
          disabled={isRecording}
        />
      )}

      {isRecording && (
        <>
          <Text style={styles.time}>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {time}</Text>
          <Button title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" onPress={onStopRecord} />
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20 },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  audioFileContainer: {
    width: "100%",
    display: "flex",
    backgroundColor: "#f0f0f0",
    padding: 15,
    borderRadius: 8,
    marginBottom: 20,
  },
  fileName: { fontSize: 16, fontWeight: "600", marginBottom: 5 },
  time: { fontSize: 14, color: "#333", marginBottom: 10 },
  buttonsRow: {
    flexDirection: "column",
    gap: 15,
    marginBottom: 10,
  },
});
