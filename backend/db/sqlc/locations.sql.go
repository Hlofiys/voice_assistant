// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: locations.sql

package db

import (
	"context"
)

const checkPharmacyByName = `-- name: CheckPharmacyByName :one
SELECT EXISTS (
  SELECT 1 FROM locations WHERE pharmacy_name ILIKE $1
)
`

func (q *Queries) CheckPharmacyByName(ctx context.Context, pharmacyName string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPharmacyByName, pharmacyName)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPharmacyByNumber = `-- name: CheckPharmacyByNumber :one
SELECT EXISTS (
  SELECT 1 FROM locations WHERE pharmacy_number = $1
)
`

func (q *Queries) CheckPharmacyByNumber(ctx context.Context, pharmacyNumber string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPharmacyByNumber, pharmacyNumber)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPharmacyByPhone = `-- name: CheckPharmacyByPhone :one
SELECT EXISTS (
  SELECT 1 FROM locations WHERE phone = $1
)
`

func (q *Queries) CheckPharmacyByPhone(ctx context.Context, phone string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPharmacyByPhone, phone)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getNearestPharmacy = `-- name: GetNearestPharmacy :many
SELECT id, text, ST_AsText(location) AS location_wkt
		FROM locations
		ORDER BY location <-> ST_SetSRID(ST_MakePoint($1, $2), 4326)
		LIMIT 3
`

type GetNearestPharmacyParams struct {
	StMakepoint   interface{} `json:"st_makepoint"`
	StMakepoint_2 interface{} `json:"st_makepoint_2"`
}

type GetNearestPharmacyRow struct {
	ID          int32       `json:"id"`
	Text        string      `json:"text"`
	LocationWkt interface{} `json:"location_wkt"`
}

func (q *Queries) GetNearestPharmacy(ctx context.Context, arg GetNearestPharmacyParams) ([]GetNearestPharmacyRow, error) {
	rows, err := q.db.Query(ctx, getNearestPharmacy, arg.StMakepoint, arg.StMakepoint_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNearestPharmacyRow{}
	for rows.Next() {
		var i GetNearestPharmacyRow
		if err := rows.Scan(&i.ID, &i.Text, &i.LocationWkt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
