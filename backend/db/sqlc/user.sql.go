// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    user_id,
    email,
    password,
    code
)VALUES(
    $1,$2,$3,$4
)
`

type CreateUserParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Code     pgtype.Text `json:"code"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Code,
	)
	return err
}

const getPasswordByEmail = `-- name: GetPasswordByEmail :one
SELECT password
FROM users
WHERE email = $1
`

func (q *Queries) GetPasswordByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordByEmail, email)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT user_id
FROM users
WHERE email = $1 AND password = $2
`

type GetUserByEmailAndPasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndPassword, arg.Email, arg.Password)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const logoutById = `-- name: LogoutById :exec
UPDATE users
SET refresh_token = NULL, expired_at = NULL
WHERE user_id = $1
`

func (q *Queries) LogoutById(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, logoutById, userID)
	return err
}

const updateCodeById = `-- name: UpdateCodeById :one
UPDATE users
SET code = NULL, refresh_token = $3, expired_at = $4
WHERE email = $1 AND code = $2
RETURNING user_id
`

type UpdateCodeByIdParams struct {
	Email        string           `json:"email"`
	Code         pgtype.Text      `json:"code"`
	RefreshToken pgtype.Text      `json:"refresh_token"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
}

func (q *Queries) UpdateCodeById(ctx context.Context, arg UpdateCodeByIdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateCodeById,
		arg.Email,
		arg.Code,
		arg.RefreshToken,
		arg.ExpiredAt,
	)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE users
SET refresh_token = $1, expired_at = $2
WHERE user_id = $3
`

type UpdateRefreshTokenParams struct {
	RefreshToken pgtype.Text      `json:"refresh_token"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
	UserID       pgtype.UUID      `json:"user_id"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateRefreshToken, arg.RefreshToken, arg.ExpiredAt, arg.UserID)
	return err
}

const verifyRefreshToken = `-- name: VerifyRefreshToken :one
WITH updated_rows AS (
    UPDATE users
    SET refresh_token = NULL, expired_at = NULL
    WHERE refresh_token = $1
          AND refresh_token IS NOT NULL
          AND expired_at IS NOT NULL
          AND $2 >= expired_at
          AND $2 <= expired_at + INTERVAL '1 month'
    RETURNING 1 
)
SELECT EXISTS (SELECT 1 FROM updated_rows)
`

type VerifyRefreshTokenParams struct {
	RefreshToken pgtype.Text      `json:"refresh_token"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
}

func (q *Queries) VerifyRefreshToken(ctx context.Context, arg VerifyRefreshTokenParams) (bool, error) {
	row := q.db.QueryRow(ctx, verifyRefreshToken, arg.RefreshToken, arg.ExpiredAt)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
