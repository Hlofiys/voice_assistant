//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ConfirmEmailRequest defines model for ConfirmEmailRequest.
type ConfirmEmailRequest struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

// ConfirmEmailResponse defines model for ConfirmEmailResponse.
type ConfirmEmailResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// RefreshTokenValidateRequest defines model for RefreshTokenValidateRequest.
type RefreshTokenValidateRequest struct {
	RefreshToken string `json:"refresh_token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Message string `json:"message"`
}

// Token defines model for Token.
type Token struct {
	// Token JWT token
	Token string `json:"token"`
}

// ChatMultipartBody defines parameters for Chat.
type ChatMultipartBody struct {
	Audio *openapi_types.File `json:"audio,omitempty"`
}

// ConfirmEmailJSONRequestBody defines body for ConfirmEmail for application/json ContentType.
type ConfirmEmailJSONRequestBody = ConfirmEmailRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ValidateRefreshTokenJSONRequestBody defines body for ValidateRefreshToken for application/json ContentType.
type ValidateRefreshTokenJSONRequestBody = RefreshTokenValidateRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// ChatMultipartRequestBody defines body for Chat for multipart/form-data ContentType.
type ChatMultipartRequestBody ChatMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Confirm user email address
	// (POST /api/auth/confirm-email)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Login to get a JWT token
	// (POST /api/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// Log out current user
	// (POST /api/auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Checking the validity of the refresh token
	// (POST /api/auth/refresh-token/validate)
	ValidateRefreshToken(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /api/auth/register)
	Register(w http.ResponseWriter, r *http.Request)
	// Validate current authentication token
	// (GET /api/auth/validate-token)
	ValidateToken(w http.ResponseWriter, r *http.Request)
	// Chat with voice assistant (send audio, get text)
	// (POST /api/chat)
	Chat(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateRefreshToken operation middleware
func (siw *ServerInterfaceWrapper) ValidateRefreshToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateRefreshToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateToken operation middleware
func (siw *ServerInterfaceWrapper) ValidateToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Chat operation middleware
func (siw *ServerInterfaceWrapper) Chat(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Chat(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/auth/confirm-email", wrapper.ConfirmEmail)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/login", wrapper.Login)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/logout", wrapper.Logout)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/refresh-token/validate", wrapper.ValidateRefreshToken)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/register", wrapper.Register)
	m.HandleFunc("GET "+options.BaseURL+"/api/auth/validate-token", wrapper.ValidateToken)
	m.HandleFunc("POST "+options.BaseURL+"/api/chat", wrapper.Chat)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYUW/bNhD+KwS3hw1Q7GTrXvyWFh2QYQ9Bm3YPQTAw4sliI5Hq8eTEK/zfhyMlK7It",
	"R+nqJOieEotH8nj3fXcf+UWmrqycBUtezr5In+ZQqvDvG2czg+XbUpniHXyuwRN/rtBVgGQgGKVOA/+l",
	"ZQVyJj2hsXO5SiTwtB0jq0QifK4Ngpazy8YsietcJa21u/4EKfE6fS985ayHbTcQMgSf/03uBix/0OBT",
	"NBUZZ+VMvovDIg4n294OzPvjr4uhORvnaK36juw60FtEh9snKMF7NYeHI9Ya7lr7Tzc3djBXQylJZKW8",
	"v3Wox+drPWOPG99BshpfLtjgoyqMVgSD8d06134vxuw+N54Anz+jnSdDSb2HX7hTZVVASCVPQ8UZEr5O",
	"U/A+q4uJOC9AeRBpDumNWLoaRXBDkBMLQJMt40eVpq62NHkwo/tIcdGmo+/wN0LR9o6rRHpIazS0fM/V",
	"NG73GhQCntaU86/r8Ot3h6WiuKlMYu3lleJo50BOVMkVL2xs5rZ9Pj0/E5lDsXAmBaG8N56UJXGt0huw",
	"mhcyFBLyMVicri1Oz89kIheAPq50MjmeHHPQXAVWVUbO5K/hE+OD8nCSqarMVNWUT9NYm4/WMKxcRCnH",
	"OST9TMtZr4TLGEPw9NrpZewglsCGaaqqCpOGidNP3tmuIfF/PyJkciZ/mHYda9q0q+muXrXqJ4ywhvAh",
	"Ijgc5Zfj4wO50NAk+NBPVjAQTehA36NFseTIv/qGPsVes8OJM7vgaiawjRXv++rw+37wgAGqlIOo0C2M",
	"Bh25P2UJIKwjkbnaanbpt6cJBQFaVQgPuAAU0Bgm0tdlqXDZIVjU7H6sVEprBO+ZW2ruuR4wt8FS4568",
	"4iU6rhTcE4c5ElrmgcjRUwVPzIq+FNgR/mBwjwTPS4GTp9s3RdAMF1X4F4X1mBByYg4klOj1w7FIdzXt",
	"hTqP/0fQjVAf7+9VVlG4+Ry0iDtvN/bNHr4Lp66mLaA+AWA+WA6rQ/MP6Ilo4eNQlMZ7Y+dC9dLRZOtZ",
	"ISV0zZEVEQpc6DloPWkkZ5d9UXR5tbrawCFnS6Q1IlgKtXc0BhttfRRiMV00yn0Yk5227/T+garxvivF",
	"AYrzCJ4EV4TxIsTp6+jRu7R1a33vxbzPzYscBG4Gwth1KF4mITuVw7cxtmJxFpw2tBQuC79x81Y+kofx",
	"3jjMvPZmeTC29a/Qoxh2coDthxXQ0CX5ucjDrSUIXVUgKL0UcGc8vSyR0sZVKGHh9nG9oe0GR+sXgDns",
	"aQldL3jKKjz5ujK8ucizapREwF3FPEseViuPUQZtZtbSYOeSI+CQ5mqPTn3Do/uqUlkXZCqFNM0clkda",
	"kdqXdVVrEx5vsvbZ59pYPtHITB9SFxDc0e6nwhGdP3ohMnTl5hPU/0oAPA7FDC9xayjferb7yYPVIsAl",
	"Cbcwzs7PvPvq3wAAAP//oE/9Aa8ZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
