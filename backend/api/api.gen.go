//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ConfirmEmailRequest defines model for ConfirmEmailRequest.
type ConfirmEmailRequest struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

// ConfirmEmailResponse defines model for ConfirmEmailResponse.
type ConfirmEmailResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Message string `json:"message"`
}

// Token defines model for Token.
type Token struct {
	// Token JWT token
	Token string `json:"token"`
}

// ConfirmEmailJSONRequestBody defines body for ConfirmEmail for application/json ContentType.
type ConfirmEmailJSONRequestBody = ConfirmEmailRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Confirm user email address
	// (POST /api/auth/confirm-email)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Login to get a JWT token
	// (POST /api/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// Log out current user
	// (POST /api/auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /api/auth/register)
	Register(w http.ResponseWriter, r *http.Request)
	// Validate current authentication token
	// (GET /api/auth/validate-token)
	ValidateToken(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateToken operation middleware
func (siw *ServerInterfaceWrapper) ValidateToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/auth/confirm-email", wrapper.ConfirmEmail)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/login", wrapper.Login)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/logout", wrapper.Logout)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/register", wrapper.Register)
	m.HandleFunc("GET "+options.BaseURL+"/api/auth/validate-token", wrapper.ValidateToken)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX328bNwz+Vwhtj1c73boXv6VDB2TYQ5Cm3UMQDIpEn9XcSVeK58Yr/L8PlPwjZ9+l",
	"7lbHxZ5sSxRJffz4Uf6sTKib4NFzVJPPKpoZ1jp9/TX4qaP6Ta1ddYUfW4wsyw2FBokdJiMTLMonLxpU",
	"ExWZnC/VslAox3p2loUi/Ng6QqsmNyuzIvu5LdbW4e4DGhY/3SxiE3zE/TQIp4Rx9heHe/SyYDEacg27",
	"4NVEXeVtyNvFfrYD537/83rozM491lbdRPou9IYo0P4NaoxRl/hlxNaGfb7/CKXzg7UaKkmhGh3jp0D2",
	"8HptTjyRxv+gWFdYushIp8d0m8kQrI8YhA+6bipMYMox0oIRxNYYjHHaViO4rFBHBDNDcw+L0BKkNIAD",
	"zJHcdJEXtTGh9Tz6IqZP0fJ6XbBuwt+ojvsRl4WKaFpyvHgrepbDvUZNSOctz+TXXfr1W6Bacw6qiqx+",
	"4invbhOYMTdqKY6dn4b9nM8vL2AaCObBGQQdo4usPcOdNvforThynAryPlmcbyzOLy9UoeZIMXt6OTob",
	"nQlooUGvG6cm6ue0JPzgWbrJWDdurFuejU1WxxcbGjYhs1RwTkW/sGrSEVGVMcTIr4NdZA33jD4d001T",
	"OZMOjj/E4LcjQb79SDhVE/XDeDszxquBMe6bFstuwZhaTAuZwekqP52dHSmFVZukHLrFSgawgg7to7ao",
	"FoL8q2+YU1b7niQu/FxXzgKtsZK4r44f911ESlTlGUJDYe4s2tz7YxnC4APDNLTeSkq/PA8UjOR1BRFp",
	"jgS4MixUbOta02LLYGgl/axU2lrCGKW3dBlFD6S30fMqPXUrLra9UslUGu6RNLSO1BydufzMXdEdxj3w",
	"J4NHTXDaFnj5fHENoRW66Cp+V1zPBeEAJTJo6MzDQ5keWn6S6rL/H0l3wOvj7SNlhSqUJVrIkfcH++4M",
	"7+NpaHmPqM9AmHdeYA3k/kY7gjV9AkHtYnS+BN0pR67W6LScAtsKtJC5IEovqI06jyM1uek+i25ul7c7",
	"TJR6gWmJ0HNS34NZSKsX6zAP12/aI6nu7uP9IOF9eYTww9o79Dw/lQYLqdOI1RWhtgvABxf5+5LHNa6g",
	"weOnr+NkuqxmfLH571FiDzHfr8yuN38Uj6uTKQ64CCm/0b/Tx10nJ1XHAvChkT4rDtDJr5GkdWk2mtTn",
	"80k+LJf/BAAA//+k560v9RIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
