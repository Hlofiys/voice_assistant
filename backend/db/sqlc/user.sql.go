// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const confirmEmailWithTokens = `-- name: ConfirmEmailWithTokens :one
UPDATE users
SET code = NULL, refresh_token = $3, expired_at = $4
WHERE email = $1 AND code = $2
RETURNING user_id
`

type ConfirmEmailWithTokensParams struct {
	Email        string           `json:"email"`
	Code         pgtype.Text      `json:"code"`
	RefreshToken pgtype.Text      `json:"refresh_token"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
}

func (q *Queries) ConfirmEmailWithTokens(ctx context.Context, arg ConfirmEmailWithTokensParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, confirmEmailWithTokens,
		arg.Email,
		arg.Code,
		arg.RefreshToken,
		arg.ExpiredAt,
	)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    user_id,
    email,
    password,
    code
)VALUES(
    $1,$2,$3,$4
)
`

type CreateUserParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Code     pgtype.Text `json:"code"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Code,
	)
	return err
}

const getUserAuthDetailsByEmail = `-- name: GetUserAuthDetailsByEmail :one
SELECT user_id, password, code
FROM users
WHERE email = $1
`

type GetUserAuthDetailsByEmailRow struct {
	UserID   pgtype.UUID `json:"user_id"`
	Password string      `json:"password"`
	Code     pgtype.Text `json:"code"`
}

func (q *Queries) GetUserAuthDetailsByEmail(ctx context.Context, email string) (GetUserAuthDetailsByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserAuthDetailsByEmail, email)
	var i GetUserAuthDetailsByEmailRow
	err := row.Scan(&i.UserID, &i.Password, &i.Code)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const logoutById = `-- name: LogoutById :exec
UPDATE users
SET refresh_token = NULL, expired_at = NULL
WHERE user_id = $1
`

func (q *Queries) LogoutById(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, logoutById, userID)
	return err
}

const resetPasswordWithCodeAndSetTokens = `-- name: ResetPasswordWithCodeAndSetTokens :one
UPDATE users
SET code = NULL, refresh_token = $3, expired_at = $4, password = $6
WHERE user_id = $1 AND code = $2 AND email = $5
RETURNING user_id
`

type ResetPasswordWithCodeAndSetTokensParams struct {
	UserID       pgtype.UUID      `json:"user_id"`
	Code         pgtype.Text      `json:"code"`
	RefreshToken pgtype.Text      `json:"refresh_token"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
	Email        string           `json:"email"`
	Password     string           `json:"password"`
}

func (q *Queries) ResetPasswordWithCodeAndSetTokens(ctx context.Context, arg ResetPasswordWithCodeAndSetTokensParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, resetPasswordWithCodeAndSetTokens,
		arg.UserID,
		arg.Code,
		arg.RefreshToken,
		arg.ExpiredAt,
		arg.Email,
		arg.Password,
	)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updateCodeByUserId = `-- name: UpdateCodeByUserId :exec
UPDATE users
SET code = $1
WHERE user_id = $2
`

type UpdateCodeByUserIdParams struct {
	Code   pgtype.Text `json:"code"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateCodeByUserId(ctx context.Context, arg UpdateCodeByUserIdParams) error {
	_, err := q.db.Exec(ctx, updateCodeByUserId, arg.Code, arg.UserID)
	return err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE users
SET refresh_token = $1, expired_at = $2
WHERE user_id = $3
`

type UpdateRefreshTokenParams struct {
	RefreshToken pgtype.Text      `json:"refresh_token"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
	UserID       pgtype.UUID      `json:"user_id"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateRefreshToken, arg.RefreshToken, arg.ExpiredAt, arg.UserID)
	return err
}

const verifyRefreshToken = `-- name: VerifyRefreshToken :one
WITH updated_user AS (
    UPDATE users
    SET refresh_token = NULL, expired_at = NULL 
    WHERE refresh_token = $1 
      AND expired_at IS NOT NULL 
      AND $2 <= expired_at     
    RETURNING user_id
)
SELECT user_id FROM updated_user
`

type VerifyRefreshTokenParams struct {
	RefreshToken pgtype.Text      `json:"refresh_token"`
	ExpiredAt    pgtype.Timestamp `json:"expired_at"`
}

func (q *Queries) VerifyRefreshToken(ctx context.Context, arg VerifyRefreshTokenParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, verifyRefreshToken, arg.RefreshToken, arg.ExpiredAt)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
