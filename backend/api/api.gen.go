//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ConfirmEmailRequest defines model for ConfirmEmailRequest.
type ConfirmEmailRequest struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

// ConfirmEmailResponse defines model for ConfirmEmailResponse.
type ConfirmEmailResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// PasswordResetCodeRequest defines model for PasswordResetCodeRequest.
type PasswordResetCodeRequest struct {
	Email string `json:"email"`
}

// PasswordResetWithCodeRequest defines model for PasswordResetWithCodeRequest.
type PasswordResetWithCodeRequest struct {
	Code        string `json:"code"`
	Email       string `json:"email"`
	NewPassword string `json:"new_password"`
}

// PasswordResetWithCodeResponse defines model for PasswordResetWithCodeResponse.
type PasswordResetWithCodeResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// RefreshRequest defines model for RefreshRequest.
type RefreshRequest struct {
	RefreshToken string `json:"refresh_token"`
}

// RefreshResponse defines model for RefreshResponse.
type RefreshResponse struct {
	// RefreshToken Refresh token
	RefreshToken string `json:"refresh_token"`

	// Token JWT token
	Token string `json:"token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Message string `json:"message"`
}

// Token defines model for Token.
type Token struct {
	// Token JWT token
	Token string `json:"token"`
}

// ChatMultipartBody defines parameters for Chat.
type ChatMultipartBody struct {
	Audio *openapi_types.File `json:"audio,omitempty"`
}

// ConfirmEmailJSONRequestBody defines body for ConfirmEmail for application/json ContentType.
type ConfirmEmailJSONRequestBody = ConfirmEmailRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RequestPasswordResetCodeJSONRequestBody defines body for RequestPasswordResetCode for application/json ContentType.
type RequestPasswordResetCodeJSONRequestBody = PasswordResetCodeRequest

// ResetPasswordWithCodeJSONRequestBody defines body for ResetPasswordWithCode for application/json ContentType.
type ResetPasswordWithCodeJSONRequestBody = PasswordResetWithCodeRequest

// RefreshTokensJSONRequestBody defines body for RefreshTokens for application/json ContentType.
type RefreshTokensJSONRequestBody = RefreshRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// ChatMultipartRequestBody defines body for Chat for multipart/form-data ContentType.
type ChatMultipartRequestBody ChatMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Confirm user email address
	// (POST /api/auth/confirm-email)
	ConfirmEmail(w http.ResponseWriter, r *http.Request)
	// Login to get a JWT token
	// (POST /api/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// Log out current user
	// (POST /api/auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Request a password reset code
	// (POST /api/auth/password/request-reset-code)
	RequestPasswordResetCode(w http.ResponseWriter, r *http.Request)
	// Reset password using a verification code
	// (POST /api/auth/password/reset-with-code)
	ResetPasswordWithCode(w http.ResponseWriter, r *http.Request)
	// Refresh access and refresh tokens
	// (POST /api/auth/refresh)
	RefreshTokens(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /api/auth/register)
	Register(w http.ResponseWriter, r *http.Request)
	// Validate current authentication token
	// (GET /api/auth/validate-token)
	ValidateToken(w http.ResponseWriter, r *http.Request)
	// Chat with voice assistant (send audio, get text)
	// (POST /api/chat)
	Chat(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) ConfirmEmail(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConfirmEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RequestPasswordResetCode operation middleware
func (siw *ServerInterfaceWrapper) RequestPasswordResetCode(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RequestPasswordResetCode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ResetPasswordWithCode operation middleware
func (siw *ServerInterfaceWrapper) ResetPasswordWithCode(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetPasswordWithCode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshTokens operation middleware
func (siw *ServerInterfaceWrapper) RefreshTokens(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshTokens(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateToken operation middleware
func (siw *ServerInterfaceWrapper) ValidateToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Chat operation middleware
func (siw *ServerInterfaceWrapper) Chat(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Chat(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/auth/confirm-email", wrapper.ConfirmEmail)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/login", wrapper.Login)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/logout", wrapper.Logout)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/password/request-reset-code", wrapper.RequestPasswordResetCode)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/password/reset-with-code", wrapper.ResetPasswordWithCode)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/refresh", wrapper.RefreshTokens)
	m.HandleFunc("POST "+options.BaseURL+"/api/auth/register", wrapper.Register)
	m.HandleFunc("GET "+options.BaseURL+"/api/auth/validate-token", wrapper.ValidateToken)
	m.HandleFunc("POST "+options.BaseURL+"/api/chat", wrapper.Chat)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZUW/buA//KoL+/4c7wI27u93D5a0bdkAP91B03fZQFINq0bFWW/JEOm025LsfJNlJ",
	"7ThO0lvSoHtqY1MiRf5+FEl/54kpSqNBE/Lxd45JBoXw/741OlW2eFcIlV/C1wqQ3OPSmhIsKfBCiZHg",
	"/tKsBD7mSFbpCZ9HHNyynjfziFv4WikLko+va7Eo7HMTNdLm9gsk5PZpW4Gl0QirZlhILWD2mcwdaPdA",
	"AiZWlaSM5mN+GV6z8DpatXbNur8/Xa1b0zlHI9U2pO9A76w1dvUEBSCKCWz2WCPYt/c/ZqL02litC0nE",
	"S4F4b6zcPl6LFQNmvIBgXdTHvAQEemsk7OzcXv9tVPVJUTaobmfeRVzD/efdA+0VdRbvYP4LwEBty9pQ",
	"rBxlWPEOCl+E8yYKCezzJ6WlJevc+igFw4Moyhy8M90yK5yPGFZJAohplY/YRQ4CgSUZJHdsZirLvBmM",
	"DJuCVeksPBRJYipNo40+HcrrV03A2gb/oDiuapxHHCGprKLZe1cQBHVvQFiwZxVl7tet//WXsYWgoJRH",
	"oXxwO4W3SwMyopLP3cZKp2bV5rOLc5Yay6ZGJcAEokISmtitSO5AS7eRIh+Qj17ibCFxdnHOIz4Fi2Gn",
	"V6PT0alzmilBi1LxMf/dP3L4oMyfJBalikVFWZyE8uJkAcPSBJQ6P/ugn0s+blUhPPgQkN4YOQvJWBNo",
	"v0yUZa4SvzD+gkYvayr33/8tpHzM/xcvi664rrjivnJr3g4Y2Qr8g4Bgf5TfTk/3ZEJNE29DO1hegNWu",
	"A/mIFvnMef71D7QplEs9RpzrqciVZLbxldP7ev96PyBYD1XKgJXWTJUEGbgfu8uSaUMsNZWWzqQ/DuMK",
	"AqtFzhDsFCyDWjDiWBWFsLMlglnlzA+ZSkhpAdFxS0zQ5QPHbdBUm8dv3BZLruSurFvPEV/17YkcrcL2",
	"wKxoV7M97vcCj0jwvBR4dTi9iQXp4CJyPCqsh4CQYRMgJljrPtwW6aaiQai79/8RdFtUH+8fZVaWm8kE",
	"JAuaVy/27h3eh1NT0QpQDwCYD9q51Vj1DeSINfAxlhUKUekJE61w1NE6AkjVRRAfX7fLn+ub+U0HcS4u",
	"LKmsBU0+y26NtqZsjWsen1jXQ500LV4/BOtkuNKg7ikBr22E95CMt+BFYw7zrmL+3kXneDKPavGn0aSz",
	"d+3NVpHj7n33A+TPUe7cK8oYZQrryuE4S5wakkywchUeT2GjY6E7+kYqIiyI2Iw+DsHD7pTowIXR8Mhn",
	"M7OOpW04IgA7tyzAW4WrMYwTmqtxJyzX85kh6HoBP1/APUG2Mz87MEi7w7Se0ITTs9pZR9XPHrw2u8qg",
	"cUSowphCpoJpR8aVYKTwoWJCy7bduANJwmBwiCW1xL4I0p6RbsWQV3tQv54i66agz8UO1zv4SYbILQg5",
	"Y/CgkDCY8+czVUWrthwRW0KMmWAa7ndrT7zjBcHJYtw8gR6SfKzFrhbfBvbbAlw12cnbN3pard/d5Fkb",
	"4ojBQ+k4H21ujXdpTpvILLrT3i23gEOSiYGhyFv3dihDFlVOqhSW4tTY4kQKEkNRF5VU/ktB2nxjuFXa",
	"nWjLSO+zKSV4oP7vUhsh16RZllpTdL93/FTVxm4odvAKKbf7jegXBC2Zh0vkR34uOr8G7SEnot+904xY",
	"I6skXGheiEe8snn9rQrHcbzQMMpyk6oZjh5m3/j8Zv5vAAAA//8ebrQaNSMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
